
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJniCpp.js
 */

#include "RNRCTStreamLayerModuleSpec.h"

namespace facebook::react {

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_initSdk(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "initSdk", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_createEventSession(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "createEventSession", "(Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_releaseEventSession(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "releaseEventSession", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_authorizationBypass(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "authorizationBypass", "(Ljava/lang/String;Ljava/lang/String;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_logout(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "logout", "()V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_useAnonymousAuth(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "useAnonymousAuth", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_isUserAuthorized(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, BooleanKind, "isUserAuthorized", "()Z", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_isInitialized(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "isInitialized", "(Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_getDemoEvents(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getDemoEvents", "(Ljava/lang/String;DLcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_getInvite(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "getInvite", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_handleDeepLink(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, PromiseKind, "handleDeepLink", "(Lcom/facebook/react/bridge/ReadableMap;Lcom/facebook/react/bridge/Promise;)V", args, count, cachedMethodId);
}

static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_removeOverlay(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
  static jmethodID cachedMethodId = nullptr;
  return static_cast<JavaTurboModule &>(turboModule).invokeJavaMethod(rt, VoidKind, "removeOverlay", "()V", args, count, cachedMethodId);
}

NativeRCTStreamLayerModuleSpecJSI::NativeRCTStreamLayerModuleSpecJSI(const JavaTurboModule::InitParams &params)
  : JavaTurboModule(params) {
  methodMap_["initSdk"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_initSdk};
  methodMap_["createEventSession"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_createEventSession};
  methodMap_["releaseEventSession"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_releaseEventSession};
  methodMap_["authorizationBypass"] = MethodMetadata {2, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_authorizationBypass};
  methodMap_["logout"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_logout};
  methodMap_["useAnonymousAuth"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_useAnonymousAuth};
  methodMap_["isUserAuthorized"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_isUserAuthorized};
  methodMap_["isInitialized"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_isInitialized};
  methodMap_["getDemoEvents"] = MethodMetadata {2, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_getDemoEvents};
  methodMap_["getInvite"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_getInvite};
  methodMap_["handleDeepLink"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_handleDeepLink};
  methodMap_["removeOverlay"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_removeOverlay};
  eventEmitterMap_["onRequestStream"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["onLBarStateChanged"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["requestAudioDucking"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  eventEmitterMap_["disableAudioDucking"] = std::make_shared<AsyncEventEmitter<folly::dynamic>>();
  setEventEmitterCallback(params.instance);
}

std::shared_ptr<TurboModule> RNRCTStreamLayerModuleSpec_ModuleProvider(const std::string &moduleName, const JavaTurboModule::InitParams &params) {
  if (moduleName == "RCTStreamLayerModule") {
    return std::make_shared<NativeRCTStreamLayerModuleSpecJSI>(params);
  }
  return nullptr;
}

} // namespace facebook::react
