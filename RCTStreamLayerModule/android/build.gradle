buildscript {
  ext.getExtOrDefault = {name ->
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : project.properties['RCTStreamLayerModule_' + name]
  }

  repositories {
    google()
    mavenCentral()
  }

  dependencies {
    classpath "com.android.tools.build:gradle:8.7.2"
    // noinspection DifferentKotlinGradleVersion
    classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${getExtOrDefault('kotlinVersion')}"
  }
}


def isNewArchitectureEnabled() {
  return rootProject.hasProperty("newArchEnabled") && rootProject.getProperty("newArchEnabled") == "true"
}

apply plugin: "com.android.library"
apply plugin: "kotlin-android"

if (isNewArchitectureEnabled()) {
  apply plugin: "com.facebook.react"
}

def getExtOrIntegerDefault(name) {
  return rootProject.ext.has(name) ? rootProject.ext.get(name) : (project.properties["RCTStreamLayerModule_" + name]).toInteger()
}

def supportsNamespace() {
  def parsed = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION.tokenize('.')
  def major = parsed[0].toInteger()
  def minor = parsed[1].toInteger()

  // Namespace support was added in 7.3.0
  return (major == 7 && minor >= 3) || major >= 8
}

def enableExoPlayer = true

android {
  if (supportsNamespace()) {
    namespace "com.streamlayer"

    sourceSets {
      main {
        manifest.srcFile "src/main/AndroidManifestNew.xml"
      }
    }
  }

  compileSdkVersion getExtOrIntegerDefault("compileSdkVersion")

  defaultConfig {
    minSdkVersion getExtOrIntegerDefault("minSdkVersion")
    targetSdkVersion getExtOrIntegerDefault("targetSdkVersion")
    buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()
    buildConfigField "boolean", "EXTENSION_EXO_PLAYER", enableExoPlayer.toString()
  }

  buildFeatures {
    buildConfig true
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  lintOptions {
    disable "GradleCompatible"
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  sourceSets {
    main {
      if (isNewArchitectureEnabled()) {
          java.srcDirs += [
            "generated/java",
            "generated/jni"
          ]
      }
    }
  }
}

repositories {
  mavenCentral()
  google()
}

def kotlin_version = getExtOrDefault("kotlinVersion")


def exoPlayer = "2.18.2"
def koin = "3.4.0" // update this version only based on expo project
def streamLayer = "2.17.0"


dependencies {
  implementation "com.facebook.react:react-android"
  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // use expo compatible koin 3.4.0 versions, otherwise it's not possible to start our sdk on expo application
  implementation "io.insert-koin:koin-core:$koin"
  implementation "io.insert-koin:koin-android:$koin"
  implementation "io.insert-koin:koin-androidx-navigation:$koin"
  api("io.streamlayer:androidsdk:$streamLayer") {
    exclude group: "io.insert-koin", module: "koin-core"
    exclude group: "io.insert-koin", module: "koin-android"
    exclude group: "io.insert-koin", module: "koin-androidx-navigation"
  }

  // exo player extension
  // TODO: we need a find solution for conditional process - compileOnly will not work because of failed Android resource linking
  if (enableExoPlayer) {
    implementation "com.google.android.exoplayer:exoplayer:$exoPlayer"
  } else {
    println('Disable Exo Player extension.')
    // use compileOnly here later
    implementation "com.google.android.exoplayer:exoplayer:$exoPlayer"
  }

}

if (isNewArchitectureEnabled()) {
  react {
    jsRootDir = file("../src/")
    libraryName = "RCTStreamLayerModule"
    codegenJavaPackageName = "com.streamlayer"
  }
}
