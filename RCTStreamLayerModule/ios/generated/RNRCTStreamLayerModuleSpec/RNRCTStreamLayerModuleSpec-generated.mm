/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleObjCpp
 *
 * We create an umbrella header (and corresponding implementation) here since
 * Cxx compilation in BUCK has a limitation: source-code producing genrule()s
 * must have a single output. More files => more genrule()s => slower builds.
 */

#import "RNRCTStreamLayerModuleSpec.h"


@implementation NativeRCTStreamLayerModuleSpecBase
- (void)emitOnRequestStream:(NSDictionary *)value
{
  _eventEmitterCallback("onRequestStream", value);
}
- (void)emitOnLBarStateChanged:(NSDictionary *)value
{
  _eventEmitterCallback("onLBarStateChanged", value);
}
- (void)emitRequestAudioDucking:(NSDictionary *)value
{
  _eventEmitterCallback("requestAudioDucking", value);
}
- (void)emitDisableAudioDucking:(BOOL)value
{
  _eventEmitterCallback("disableAudioDucking", [NSNumber numberWithBool:value]);
}

- (void)setEventEmitterCallback:(EventEmitterCallbackWrapper *)eventEmitterCallbackWrapper
{
  _eventEmitterCallback = std::move(eventEmitterCallbackWrapper->_eventEmitterCallback);
}
@end


namespace facebook::react {
  
    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_initSdk(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "initSdk", @selector(initSdk:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_createEventSession(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "createEventSession", @selector(createEventSession:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_releaseEventSession(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "releaseEventSession", @selector(releaseEventSession:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_authorizationBypass(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "authorizationBypass", @selector(authorizationBypass:token:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_logout(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "logout", @selector(logout), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_useAnonymousAuth(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "useAnonymousAuth", @selector(useAnonymousAuth:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_isUserAuthorized(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, BooleanKind, "isUserAuthorized", @selector(isUserAuthorized), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_isInitialized(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "isInitialized", @selector(isInitialized:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_getDemoEvents(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getDemoEvents", @selector(getDemoEvents:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_getInvite(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "getInvite", @selector(getInvite:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_handleDeepLink(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, PromiseKind, "handleDeepLink", @selector(handleDeepLink:resolve:reject:), args, count);
    }

    static facebook::jsi::Value __hostFunction_NativeRCTStreamLayerModuleSpecJSI_removeOverlay(facebook::jsi::Runtime& rt, TurboModule &turboModule, const facebook::jsi::Value* args, size_t count) {
      return static_cast<ObjCTurboModule&>(turboModule).invokeObjCMethod(rt, VoidKind, "removeOverlay", @selector(removeOverlay), args, count);
    }

  NativeRCTStreamLayerModuleSpecJSI::NativeRCTStreamLayerModuleSpecJSI(const ObjCTurboModule::InitParams &params)
    : ObjCTurboModule(params) {
      
        methodMap_["initSdk"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_initSdk};
        
        
        methodMap_["createEventSession"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_createEventSession};
        
        
        methodMap_["releaseEventSession"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_releaseEventSession};
        
        
        methodMap_["authorizationBypass"] = MethodMetadata {2, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_authorizationBypass};
        
        
        methodMap_["logout"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_logout};
        
        
        methodMap_["useAnonymousAuth"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_useAnonymousAuth};
        
        
        methodMap_["isUserAuthorized"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_isUserAuthorized};
        
        
        methodMap_["isInitialized"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_isInitialized};
        
        
        methodMap_["getDemoEvents"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_getDemoEvents};
        
        
        methodMap_["getInvite"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_getInvite};
        
        
        methodMap_["handleDeepLink"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_handleDeepLink};
        
        
        methodMap_["removeOverlay"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleSpecJSI_removeOverlay};
        
        eventEmitterMap_["onRequestStream"] = std::make_shared<AsyncEventEmitter<id>>();
        eventEmitterMap_["onLBarStateChanged"] = std::make_shared<AsyncEventEmitter<id>>();
        eventEmitterMap_["requestAudioDucking"] = std::make_shared<AsyncEventEmitter<id>>();
        eventEmitterMap_["disableAudioDucking"] = std::make_shared<AsyncEventEmitter<id>>();
        setEventEmitterCallback([&](const std::string &name, id value) {
          static_cast<AsyncEventEmitter<id> &>(*eventEmitterMap_[name]).emit(value);
        });
  }
} // namespace facebook::react
