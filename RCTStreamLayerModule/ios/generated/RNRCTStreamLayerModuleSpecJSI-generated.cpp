/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleCpp.js
 */

#include "RNRCTStreamLayerModuleSpecJSI.h"

namespace facebook::react {

static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_initSdk(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->initSdk(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_createEventSession(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->createEventSession(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_releaseEventSession(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->releaseEventSession(
    rt
  );
}
static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_authorizationBypass(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->authorizationBypass(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asString(rt)
  );
}
static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_logout(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->logout(
    rt
  );
  return jsi::Value::undefined();
}
static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_useAnonymousAuth(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->useAnonymousAuth(
    rt
  );
}
static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_isUserAuthorized(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->isUserAuthorized(
    rt
  );
}
static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_isInitialized(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->isInitialized(
    rt
  );
}
static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_getDemoEvents(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->getDemoEvents(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asString(rt),
    count <= 1 ? throw jsi::JSError(rt, "Expected argument in position 1 to be passed") : args[1].asNumber()
  );
}
static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_getInvite(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->getInvite(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_handleDeepLink(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  return static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->handleDeepLink(
    rt,
    count <= 0 ? throw jsi::JSError(rt, "Expected argument in position 0 to be passed") : args[0].asObject(rt)
  );
}
static jsi::Value __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_removeOverlay(jsi::Runtime &rt, TurboModule &turboModule, const jsi::Value* args, size_t count) {
  static_cast<NativeRCTStreamLayerModuleCxxSpecJSI *>(&turboModule)->removeOverlay(
    rt
  );
  return jsi::Value::undefined();
}

NativeRCTStreamLayerModuleCxxSpecJSI::NativeRCTStreamLayerModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker)
  : TurboModule("RCTStreamLayerModule", jsInvoker) {
  methodMap_["initSdk"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_initSdk};
  methodMap_["createEventSession"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_createEventSession};
  methodMap_["releaseEventSession"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_releaseEventSession};
  methodMap_["authorizationBypass"] = MethodMetadata {2, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_authorizationBypass};
  methodMap_["logout"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_logout};
  methodMap_["useAnonymousAuth"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_useAnonymousAuth};
  methodMap_["isUserAuthorized"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_isUserAuthorized};
  methodMap_["isInitialized"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_isInitialized};
  methodMap_["getDemoEvents"] = MethodMetadata {2, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_getDemoEvents};
  methodMap_["getInvite"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_getInvite};
  methodMap_["handleDeepLink"] = MethodMetadata {1, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_handleDeepLink};
  methodMap_["removeOverlay"] = MethodMetadata {0, __hostFunction_NativeRCTStreamLayerModuleCxxSpecJSI_removeOverlay};
}


} // namespace facebook::react
