/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleH.js
 */

#pragma once

#include <ReactCommon/TurboModule.h>
#include <react/bridging/Bridging.h>

namespace facebook::react {


  class JSI_EXPORT NativeRCTStreamLayerModuleCxxSpecJSI : public TurboModule {
protected:
  NativeRCTStreamLayerModuleCxxSpecJSI(std::shared_ptr<CallInvoker> jsInvoker);

public:
  virtual jsi::Value initSdk(jsi::Runtime &rt, jsi::Object config) = 0;
  virtual jsi::Value createEventSession(jsi::Runtime &rt, jsi::String name) = 0;
  virtual jsi::Value releaseEventSession(jsi::Runtime &rt) = 0;
  virtual jsi::Value authorizationBypass(jsi::Runtime &rt, jsi::String schema, jsi::String token) = 0;
  virtual void logout(jsi::Runtime &rt) = 0;
  virtual jsi::Value useAnonymousAuth(jsi::Runtime &rt) = 0;
  virtual bool isUserAuthorized(jsi::Runtime &rt) = 0;
  virtual bool isInitialized(jsi::Runtime &rt) = 0;
  virtual jsi::Value getDemoEvents(jsi::Runtime &rt, jsi::String date) = 0;
  virtual jsi::Value getInvite(jsi::Runtime &rt, jsi::Object json) = 0;
  virtual jsi::Value handleDeepLink(jsi::Runtime &rt, jsi::Object params) = 0;
  virtual void removeOverlay(jsi::Runtime &rt) = 0;

};

template <typename T>
class JSI_EXPORT NativeRCTStreamLayerModuleCxxSpec : public TurboModule {
public:
  jsi::Value create(jsi::Runtime &rt, const jsi::PropNameID &propName) override {
    return delegate_.create(rt, propName);
  }

  std::vector<jsi::PropNameID> getPropertyNames(jsi::Runtime& runtime) override {
    return delegate_.getPropertyNames(runtime);
  }

  static constexpr std::string_view kModuleName = "RCTStreamLayerModule";

protected:
  NativeRCTStreamLayerModuleCxxSpec(std::shared_ptr<CallInvoker> jsInvoker)
    : TurboModule(std::string{NativeRCTStreamLayerModuleCxxSpec::kModuleName}, jsInvoker),
      delegate_(reinterpret_cast<T*>(this), jsInvoker) {}

  template <typename OnRequestStreamType> void emitOnRequestStream(OnRequestStreamType value) {
    static_assert(bridging::supportsFromJs<OnRequestStreamType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["onRequestStream"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  template <typename OnLBarStateChangedType> void emitOnLBarStateChanged(OnLBarStateChangedType value) {
    static_assert(bridging::supportsFromJs<OnLBarStateChangedType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["onLBarStateChanged"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  template <typename RequestAudioDuckingType> void emitRequestAudioDucking(RequestAudioDuckingType value) {
    static_assert(bridging::supportsFromJs<RequestAudioDuckingType, jsi::Object>, "value cannnot be converted to jsi::Object");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["requestAudioDucking"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

  template <typename DisableAudioDuckingType> void emitDisableAudioDucking(DisableAudioDuckingType value) {
    static_assert(bridging::supportsFromJs<DisableAudioDuckingType, bool>, "value cannnot be converted to bool");
    static_cast<AsyncEventEmitter<jsi::Value>&>(*delegate_.eventEmitterMap_["disableAudioDucking"]).emit([jsInvoker = jsInvoker_, eventValue = value](jsi::Runtime& rt) -> jsi::Value {
      return bridging::toJs(rt, eventValue, jsInvoker);
    });
  }

private:
  class Delegate : public NativeRCTStreamLayerModuleCxxSpecJSI {
  public:
    Delegate(T *instance, std::shared_ptr<CallInvoker> jsInvoker) :
      NativeRCTStreamLayerModuleCxxSpecJSI(std::move(jsInvoker)), instance_(instance) {
      eventEmitterMap_["onRequestStream"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["onLBarStateChanged"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["requestAudioDucking"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
      eventEmitterMap_["disableAudioDucking"] = std::make_shared<AsyncEventEmitter<jsi::Value>>();
    }

    jsi::Value initSdk(jsi::Runtime &rt, jsi::Object config) override {
      static_assert(
          bridging::getParameterCount(&T::initSdk) == 2,
          "Expected initSdk(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::initSdk, jsInvoker_, instance_, std::move(config));
    }
    jsi::Value createEventSession(jsi::Runtime &rt, jsi::String name) override {
      static_assert(
          bridging::getParameterCount(&T::createEventSession) == 2,
          "Expected createEventSession(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::createEventSession, jsInvoker_, instance_, std::move(name));
    }
    jsi::Value releaseEventSession(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::releaseEventSession) == 1,
          "Expected releaseEventSession(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::releaseEventSession, jsInvoker_, instance_);
    }
    jsi::Value authorizationBypass(jsi::Runtime &rt, jsi::String schema, jsi::String token) override {
      static_assert(
          bridging::getParameterCount(&T::authorizationBypass) == 3,
          "Expected authorizationBypass(...) to have 3 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::authorizationBypass, jsInvoker_, instance_, std::move(schema), std::move(token));
    }
    void logout(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::logout) == 1,
          "Expected logout(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::logout, jsInvoker_, instance_);
    }
    jsi::Value useAnonymousAuth(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::useAnonymousAuth) == 1,
          "Expected useAnonymousAuth(...) to have 1 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::useAnonymousAuth, jsInvoker_, instance_);
    }
    bool isUserAuthorized(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::isUserAuthorized) == 1,
          "Expected isUserAuthorized(...) to have 1 parameters");

      return bridging::callFromJs<bool>(
          rt, &T::isUserAuthorized, jsInvoker_, instance_);
    }
    bool isInitialized(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::isInitialized) == 1,
          "Expected isInitialized(...) to have 1 parameters");

      return bridging::callFromJs<bool>(
          rt, &T::isInitialized, jsInvoker_, instance_);
    }
    jsi::Value getDemoEvents(jsi::Runtime &rt, jsi::String date) override {
      static_assert(
          bridging::getParameterCount(&T::getDemoEvents) == 2,
          "Expected getDemoEvents(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getDemoEvents, jsInvoker_, instance_, std::move(date));
    }
    jsi::Value getInvite(jsi::Runtime &rt, jsi::Object json) override {
      static_assert(
          bridging::getParameterCount(&T::getInvite) == 2,
          "Expected getInvite(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::getInvite, jsInvoker_, instance_, std::move(json));
    }
    jsi::Value handleDeepLink(jsi::Runtime &rt, jsi::Object params) override {
      static_assert(
          bridging::getParameterCount(&T::handleDeepLink) == 2,
          "Expected handleDeepLink(...) to have 2 parameters");

      return bridging::callFromJs<jsi::Value>(
          rt, &T::handleDeepLink, jsInvoker_, instance_, std::move(params));
    }
    void removeOverlay(jsi::Runtime &rt) override {
      static_assert(
          bridging::getParameterCount(&T::removeOverlay) == 1,
          "Expected removeOverlay(...) to have 1 parameters");

      return bridging::callFromJs<void>(
          rt, &T::removeOverlay, jsInvoker_, instance_);
    }

  private:
    friend class NativeRCTStreamLayerModuleCxxSpec;
    T *instance_;
  };

  Delegate delegate_;
};

} // namespace facebook::react
