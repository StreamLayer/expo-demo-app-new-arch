
/**
 * This code was generated by [react-native-codegen](https://www.npmjs.com/package/react-native-codegen).
 *
 * Do not edit this file as changes may cause incorrect behavior and will be lost
 * once the code is regenerated.
 *
 * @generated by codegen project: GenerateModuleJavaSpec.js
 *
 * @nolint
 */

package com.streamlayer;

import com.facebook.proguard.annotations.DoNotStrip;
import com.facebook.react.bridge.Promise;
import com.facebook.react.bridge.ReactApplicationContext;
import com.facebook.react.bridge.ReactContextBaseJavaModule;
import com.facebook.react.bridge.ReactMethod;
import com.facebook.react.bridge.ReadableMap;
import com.facebook.react.turbomodule.core.interfaces.TurboModule;
import javax.annotation.Nonnull;

public abstract class NativeRCTStreamLayerModuleSpec extends ReactContextBaseJavaModule implements TurboModule {
  public static final String NAME = "RCTStreamLayerModule";

  public NativeRCTStreamLayerModuleSpec(ReactApplicationContext reactContext) {
    super(reactContext);
  }

  @Override
  public @Nonnull String getName() {
    return NAME;
  }

  protected final void emitOnRequestStream(ReadableMap value) {
    mEventEmitterCallback.invoke("onRequestStream", value);
  }

  protected final void emitOnLBarStateChanged(ReadableMap value) {
    mEventEmitterCallback.invoke("onLBarStateChanged", value);
  }

  protected final void emitRequestAudioDucking(ReadableMap value) {
    mEventEmitterCallback.invoke("requestAudioDucking", value);
  }

  protected final void emitDisableAudioDucking(boolean value) {
    mEventEmitterCallback.invoke("disableAudioDucking", value);
  }

  @ReactMethod
  @DoNotStrip
  public abstract void initSdk(ReadableMap config, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void createEventSession(String name, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void releaseEventSession(Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void authorizationBypass(String schema, String token, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void logout();

  @ReactMethod
  @DoNotStrip
  public abstract void useAnonymousAuth(Promise promise);

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract boolean isUserAuthorized();

  @ReactMethod(isBlockingSynchronousMethod = true)
  @DoNotStrip
  public abstract boolean isInitialized();

  @ReactMethod
  @DoNotStrip
  public abstract void getDemoEvents(String date, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void getInvite(ReadableMap json, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void handleDeepLink(ReadableMap params, Promise promise);

  @ReactMethod
  @DoNotStrip
  public abstract void removeOverlay();
}
